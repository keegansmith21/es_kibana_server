version: '3'

# Create the certificates and attempt to copy them to the nodes

services:
  create_certs:
    container_name: create_certs
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    command: >
      bash -c '
        echo "Checking CA...";
        if [[ ! -f  /certs/ca.zip ]]; then
          echo "CA not found. Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out /certs/ca.zip;
          unzip -o /certs/ca.zip -d /certs;
        else
          echo "CA already present";
        fi;
        echo "CA OK"

        echo "Checking ES certificates...";
        if [[ ! -f /certs/certs.zip ]]; then
          bin/elasticsearch-certutil cert --silent --pem\
          --ca-cert /certs/ca/ca.crt --ca-key /certs/ca/ca.key\
          --in ${CFG_DIR}/instances.yml --out /certs/certs.zip;
          unzip /certs/certs.zip -d /certs;
        fi; 
        if [[ ! -f /es01_certs/es01.key ]] || [[ ! -f /es01_certs/es01.crt ]] || [[ ! -f /es01_certs/ca.crt ]]; then
          echo "Copying certificates and key to es01..."
          cp /certs/es01/* /es01_certs;
          cp /certs/ca/ca.crt /es01_certs;
        fi;
        if [[ ! -f /kb01_certs/kb01.key ]] || [[ ! -f /kb01_certs/kb01.crt ]] || [[ ! -f /kb01_certs/ca.crt ]]; then
          echo "Copying certificates and key to kb01..."
          cp /certs/kb01/* /kb01_certs;
          cp /certs/ca/ca.crt /kb01_certs;
        fi;
        chown -R 1000:0 /certs 
        chown -R 1000:0 /es01_certs 
        chown -R 1000:0 /kb01_certs
        echo "Certificates OK"

        until 
          curl -s --cacert /certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials";
        do 
          sleep 10;
          echo "Waiting for Elasticsearch availability...";
        done;
        echo "Elasticsearch instance up and running"

        echo "Setting kibana_system password";
        until 
          curl -s -X POST --cacert /certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD}\
          -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password \
          -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; 
        do 
          sleep 10;
          echo "Waiting for Kibana availability...";
        done;
        echo "Kibana password configured"

        echo "All done!";
      '
    user: "0"
    working_dir: /usr/share/elasticsearch
    volumes:
      [
        'certs:/certs',
        'es01_certs:/es01_certs',
        'kb01_certs:/kb01_certs',
        '${REPO_DIR}/instances.yml:${CFG_DIR}/instances.yml'
      ]

  # Elasticsearch

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    environment:
      - node.name=es01
      - discovery.seed_hosts=es01
      - cluster.initial_master_nodes=es01
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - "ES_JAVA_OPTS=-Xms1024M -Xmx1024M"
      # xpack stuff
      - xpack.license.self_generated.type=trial
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=${CERTS_DIR}/es01.key
      - xpack.security.http.ssl.certificate_authorities=${CERTS_DIR}/ca.crt
      - xpack.security.http.ssl.certificate=${CERTS_DIR}/es01.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.certificate_authorities=${CERTS_DIR}/ca.crt
      - xpack.security.transport.ssl.key=${CERTS_DIR}/es01.key
      - xpack.security.transport.ssl.certificate=${CERTS_DIR}/es01.crt
      # For OIDC authentication
      - xpack.security.authc.token.enabled=true
    volumes:
      - 'data01:/usr/share/elasticsearch/data'
      - 'es01_certs:${CERTS_DIR}'
      - '${REPO_DIR}/elasticsearch.yml:${CFG_DIR}/elasticsearch.yml'
      - '${KEYSTORE_DIR}/elasticsearch.keystore:/usr/share/elasticsearch/config/elasticsearch.keystore'
    ports:
      - ${ES_PORT}:9200
    #mem_limit: ${MEM_LIMIT}
    healthcheck:
      test: curl --cacert ${CERTS_DIR}/ca.crt -s https://localhost:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana
  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - 'kb01_certs:${CERTS_DIR}'
    ports:
      - ${KIBANA_PORT}:5601 #kibana port
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=${KIBANA_USER}
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=${CERTS_DIR}/ca.crt
      - SERVER_SSL_CERTIFICATE=${CERTS_DIR}/kb01.crt
      - SERVER_SSL_KEY=${CERTS_DIR}/kb01.key
      - SERVER_SSL_ENABLED=true
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert ${CERTS_DIR}/ca.crt -I https://localhost:5601 | grep -q 'HTTP/1.1 302 Found'"
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  # nginx reverse proxy
  rproxy:
    image: nginx:latest
    restart: unless-stopped
    volumes:
      - ./default.conf:/etc/nginx/conf.d/default.conf
      - ./upstream.conf:/etc/nginx/conf.d/upstream.conf
      - ./www:/data/www
    ports:
      - 80:80

  # Keycloak
  keycloak:
    image: quay.io/keycloak/keycloak:${KC_VERSION}
    container_name: keycloak
    command:
      - 'start-dev'
      #- '--auto-build'
    environment:
      # Database 
      KC_DB: postgres
      KC_DB_URL_HOST: postgres
      KC_URL_DB_PORT: 5432
      KC_DB_USER: keycloak
      KC_DB_PASSWORD: password
      KC_DB_SCHEMA: public
      # KC host
      KC_HOSTNAME: localhost
      KC_HOSTNAME_ADMIN: admin
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      # Reverse Proxy
      KC_HOSTNAME_PORT: 80
      KC_PROXY: edge
      KC_FEATURES: token-exchange

      # HTTP
      KC_HTTP_ENABLED: "true"
      KC_HTTP_PORT: 8080
      KC_HOSTNAME_STRICT: "false"
      KC_HTTP_RELATIVE_PATH: /auth
      KC_USER: admin
      KC_PASSWORD: admin
      # HTTPS
      KC_HOSTNAME_STRICT_HTTPS: "false"
      #KC_HTTPS_PORT: 8443
      #KC_HTTPS_CERTIFICATE_FILE: /opt/keycloak/conf/keycloak.crt
      #KC_HTTPS_CERTIFICATE_KEY_FILE: /opt/keycloak/conf/keycloak.key
    ports:
      #- 8443:8443
      - 8080:8080
    depends_on:
      - postgres
    #volumes:
    #  - '${LOCAL_CERT_DIR}/keycloak.crt:/opt/keycloak/conf/keycloak.crt'
    #  - '${LOCAL_CERT_DIR}/keycloak.key:/opt/keycloak/conf/keycloak.key'


    # PostgreSQL
  postgres:
    image: postgres:latest
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - '${LOCAL_CERT_DIR}/postgres.crt:/root/.postgresql/postgres.crt'
      - '${LOCAL_CERT_DIR}/postgres.key:/root/.postgresql/postgres.key'
      - '${LOCAL_CERT_DIR}/keycloak.crt:/opt/keycloak/conf/keycloak.crt'
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    ports:
      - 5433:5432

volumes:
  data01:
    driver: local
  certs:
    driver: local
  es01_certs:
    driver: local
  kb01_certs:
    driver: local
  postgres_data:
    driver: local
